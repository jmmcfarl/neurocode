
clear all
data_dir = cell(0);
data_type = cell(0);
data_exp = cell(0);
data_ep = [];
data_dp = [];
data_hpc_lfp = [];
data_hpc_mua = [];

cd C:\WC_Germany\sven_thomas_combined\
load ./combined_dir_nd.mat
for ii = 1:length(l3mec)
    data_dir = cat(2,data_dir,combined_dir{l3mec(ii)});
    data_type = cat(2,data_type,{'L3MEC'});
    if ismember(l3mec(ii),old_data_inds)
        data_exp = cat(2,data_exp,{'T'});
    else
        data_exp = cat(2,data_exp,{'S'});
    end
    data_ep = cat(2,data_ep,Inf);
    data_dp = cat(2,data_dp,nan);
    data_hpc_lfp = cat(2,data_hpc_lfp,hpc_lfp(l3mec(ii)));
    data_hpc_mua = cat(2,data_hpc_mua,hpc_mua(l3mec(ii)));
end
for ii = 1:length(l3mec_np)
    data_dir = cat(2,data_dir,combined_dir{l3mec_np(ii)});
    data_type = cat(2,data_type,{'L3MEC'});
    if ismember(l3mec_np(ii),old_data_inds)
        data_exp = cat(2,data_exp,{'T'});
    else
        data_exp = cat(2,data_exp,{'S'});
    end
    data_ep = cat(2,data_ep,Inf);
    data_dp = cat(2,data_dp,nan);
    data_hpc_lfp = cat(2,data_hpc_lfp,hpc_lfp(l3mec_np(ii)));
    data_hpc_mua = cat(2,data_hpc_mua,hpc_mua(l3mec_np(ii)));
end
for ii = 1:length(l3lec)
    data_dir = cat(2,data_dir,combined_dir{l3lec(ii)});
    data_type = cat(2,data_type,{'L3LEC'});
    if ismember(l3lec(ii),old_data_inds)
        data_exp = cat(2,data_exp,{'T'});
    else
        data_exp = cat(2,data_exp,{'S'});
    end
    data_ep = cat(2,data_ep,Inf);
    data_dp = cat(2,data_dp,nan);
    data_hpc_lfp = cat(2,data_hpc_lfp,hpc_lfp(l3lec(ii)));
    data_hpc_mua = cat(2,data_hpc_mua,hpc_mua(l3lec(ii)));
end
for ii = 1:length(l3lec_np)
    data_dir = cat(2,data_dir,combined_dir{l3lec_np(ii)});
    data_type = cat(2,data_type,{'L3LEC'});
    if ismember(l3lec_np(ii),old_data_inds)
        data_exp = cat(2,data_exp,{'T'});
    else
        data_exp = cat(2,data_exp,{'S'});
    end
    data_ep = cat(2,data_ep,Inf);
    data_dp = cat(2,data_dp,nan);
    data_hpc_lfp = cat(2,data_hpc_lfp,hpc_lfp(l3lec_np(ii)));
    data_hpc_mua = cat(2,data_hpc_mua,hpc_mua(l3lec_np(ii)));
end

cd C:\WC_Germany\persistent_downs\
load ./new_pdown_dir
cur_uset = find(new_pdown_use == 1);
for ii = 1:length(cur_uset)
    data_dir = cat(2,data_dir,new_pdown_dir{cur_uset(ii)});
    data_type = cat(2,data_type,{'L3MEC'});
    data_exp = cat(2,data_exp,{'S'});
    data_ep = cat(2,data_ep,new_pdown_ep(cur_uset(ii)));
    data_dp = cat(2,data_ep,new_pdown_dp(cur_uset(ii)));
    data_hpc_lfp = cat(2,data_hpc_lfp,2);
    data_hpc_mua = cat(2,data_hpc_mua,new_pdown_hpcmua(cur_uset(ii))-1);
end

addpath('C:\WC_Germany\parietal_cortical_2010\');
addpath('C:\WC_Germany\persistent_9_27_2010\');
addpath('C:\WC_Germany\new_mec\');
addpath('C:\WC_Germany\overall_EC');
addpath('C:\WC_Germany\hsmm_state_detection');
addpath('C:\WC_Germany\sven_thomas_combined');
addpath('C:\Code\general_functions\');
addpath('C:\WC_Germany\persistent_downs\');
addpath('C:\Code\NIMtoolbox_dev\');
addpath(genpath('C:\Code\minFunc_2012\'));
%%

raw_Fs = 2016;
dsf = 8;
Fsd = raw_Fs/dsf;
niqf = raw_Fs/2;
hcf = 10;
lcf = 0.05;
lcf_hf = 40;
hcf_hf = 80;
hcf_sm = 0.025;
rate_sm = round(Fsd*0.05);

backlag = 6*Fsd;
forwardlag = 8*Fsd;
lags = (-backlag:forwardlag);

params.Fs = raw_Fs;
params.fpass = [0 100];
params.tapers = [3 5];
win = 25;

%robust persistence requires MP skips states longer than this
thresh_lf8_updur = 0.5;
thresh_lf8_downdur = 0.5;


%%
min_rec_dur = 500; %in sec
used_dirs = find(data_ep > min_rec_dur);
% for d = 1:length(used_dirs)
d = length(used_dirs)-2;
    cd(data_dir{used_dirs(d)})
    pwd
    
    load ./used_data lf7 wcv_minus_spike
    [lf8_lf,t_axis] = get_lf_features(lf7,raw_Fs,Fsd,[lcf hcf]);
    wcv_lf = get_lf_features(wcv_minus_spike,raw_Fs,Fsd,[lcf hcf]);
    
    if data_hpc_lfp(d) == 3
        load ./used_data lf3 lf5
        if ismember(d,old_data_inds)
            lf3 = lf3 + lf5; %redefine LF3 wrt gnd
        end
        hpc_hf = get_hf_features(lf3,raw_Fs,Fsd,[lcf_hf hcf_hf],hcf_sm);
    else
        load ./used_data lf2
        hpc_hf = get_hf_features(lf2,raw_Fs,Fsd,[lcf_hf hcf_hf],hcf_sm);
    end

    lf8_hf = get_hf_features(lf7,raw_Fs,Fsd,[lcf_hf hcf_hf],hcf_sm);
    
    load ./sync_times.mat
    synct_d = downsample(synct,dsf);

    end_time = min(data_ep(used_dirs(d)),data_dp(used_dirs(d)));
    ep = find(t_axis >= end_time,1);
    if ~isempty(ep)
        lf8_lf(ep+1:end) = []; wcv_lf(ep+1:end) = []; t_axis(ep+1:end) = []; synct_d(ep+1:end) = [];
        hpc_hf(ep+1:end) = []; lf8_hf(ep+1:end) = [];
    else
        ep = length(t_axis);
    end
    
    %% LOAD IN MUA
    if exist('./mua_data3.mat','file')
        load ./mua_data3
        if ~isnan(data_hpc_mua(d))
            hpc_mua_times = mua_times{data_hpc_mua(d)};
            hpc_mua_times(hpc_mua_times > synct_d(end) | hpc_mua_times < synct_d(1)) = [];
            hpc_mua_rate =hist(hpc_mua_times,synct_d);
%             hpc_mua_rate = jmm_smooth_1d_cor(hpc_mua_rate,rate_sm);
        else
            hpc_mua_rate = nan(size(synct_d));
        end
        ctx_mua_times = sort([mua_times{6} mua_times{7} mua_times{8}]);
        ctx_mua_rate = hist(ctx_mua_times,synct_d);
%         ctx_mua_rate = jmm_smooth_1d_cor(ctx_mua_rate,rate_sm);
        if length(hpc_mua_rate) > length(synct_d)
            hpc_mua_rate = hpc_mua_rate(1:length(synct_d));
            ctx_mua_rate = ctx_mua_rate(1:length(synct_d));
        end
    else
        hpc_mua_rate = nan(size(synct_d));
        ctx_mua_rate = nan(size(synct_d));
    end
    avg_hpc_mua_rate(d) = nanmean(hpc_mua_rate)*Fsd;
    avg_ctx_mua_rate(d) = nanmean(ctx_mua_rate)*Fsd;
%     std_hpc_mua_rate(d) = nanstd(hpc_mua_rate);
%     std_ctx_mua_rate(d) = nanstd(ctx_mua_rate);
%     hpc_mua_rate = zscore(hpc_mua_rate);
%     ctx_mua_rate = zscore(ctx_mua_rate);
    
    %%
    if exist('./all_combined_mp_uds.mat','file')
        load ./all_combined_mp_uds.mat
        load ./all_combined_lf7_uds.mat
    else
        load ./pa_hsmm_state_seq7_combined_fin_nd.mat
        load ./pa_hsmm_state_seq_combined_fin_nd.mat
    end
    hmm8 = hmm7;
    lfp_state_seq = hmm_bbstate_seq7;
    mp_state_seq = hmm_bbstate_seq;
    
    %         if you want to flip the roles of the MP and LFP
    %         temp = hsmm_bbstate_seq8;
    %         hsmm_bbstate_seq8 = hsmm_bbstate_seq;
    %         hsmm_bbstate_seq = temp;
    
    [new_seg_inds] = resample_uds_seg_inds_v2(hmm.UDS_segs,hmm.Fs,Fsd,mp_state_seq);
    dur_uds = sum(diff(new_seg_inds,[],2))/Fsd;
    [up_trans_inds,down_trans_inds] = compute_state_transitions_seg(new_seg_inds,mp_state_seq);
    [up_trans_inds8,down_trans_inds8] = compute_state_transitions_seg(new_seg_inds,lfp_state_seq);
    
    bad_mp_states = find(up_trans_inds > ep | down_trans_inds > ep);
    up_trans_inds(bad_mp_states) = []; down_trans_inds(bad_mp_states) = [];
    bad_lfp_states = find(up_trans_inds8 > ep | down_trans_inds8 > ep);
    up_trans_inds8(bad_lfp_states) = []; down_trans_inds8(bad_lfp_states) = [];
    
    fract_uds_dur(d) = dur_uds/t_axis(end);

    %%
    tent_spacing = 4;
    backlag = 0.25;
    forwardlag = 1;
    flen = floor((backlag+forwardlag)*Fsd/tent_spacing)+1;
    dt = 1/Fsd;
    upsamp_fac = 1;
    stim_params = NMMcreate_stim_params(flen,dt,upsamp_fac,tent_spacing);
    up_trans_vec = zeros(size(t_axis))';
    up_trans_vec(up_trans_inds-round(backlag*Fsd)) = 1;
    up_trans8_vec = zeros(size(t_axis))';
    up_trans8_vec(up_trans_inds8-round(backlag*Fsd)) = 1;
    down_trans_vec = zeros(size(t_axis))';
    down_trans_vec(down_trans_inds-round(backlag*Fsd)) = 1;
    down_trans8_vec = zeros(size(t_axis))';
    down_trans8_vec(down_trans_inds8-round(backlag*Fsd)) = 1;
    
    clear stim_mat
    stim_mat{1} = create_time_embedding(up_trans_vec,stim_params);
    stim_mat{2} = create_time_embedding(up_trans8_vec,stim_params);
    stim_mat{3} = create_time_embedding(down_trans_vec,stim_params);
    stim_mat{4} = create_time_embedding(down_trans8_vec,stim_params);
    
    clear all_stim_params
    for i = 1:length(stim_mat)
        all_stim_params(i) = stim_params;
    end
    
    mod_signs = ones(1,length(stim_mat));
    Xtargs = 1:length(stim_mat);
    reg_params = NMMcreate_reg_params('lambda_d2T',5);
    glm1 = NMMinitialize_model(all_stim_params,mod_signs,{'lin','lin','lin','lin'},reg_params,Xtargs);
    
    Robs = hpc_mua_rate;
%     Robs = ctx_mua_rate;
    silent = 0;
    optim_p.progTol = 1e-6;
    optim_p.optTol = 1e-4;
    glm1 = NMMfit_filters(glm1,Robs,stim_mat,[],[],silent,optim_p);
    
    filts = [glm1.mods(:).filtK];
    t_ax = (-backlag:tent_spacing/Fsd:forwardlag);
    
    %%
    backlag = round(Fsd*0.5);
    forwardlag = round(Fsd*0.75);
    
    [ev_avg,lags] = get_event_trig_avg(ctx_mua_rate,up_trans_inds8,backlag,forwardlag);
    
    