clear all
% close all

dir_prefix = '~';
Expt_name = 'M266';

%% SET ANALYSIS PARAMETERS
stim_fs = 100; %in Hz
dt = 0.01;

min_trial_dur = 0.5;
beg_buffer = 0.3;

flen = 12;
use_nPix = 32;
% full_nPix = 36;
stim_params = NIMcreate_stim_params([flen use_nPix],dt);
Fr = 1;

n_probes = 24;

%% LOOP OVER EXPTS

data_dir = [dir_prefix '/Data/bruce/' Expt_name];
cd(data_dir);

if Expt_name(1) == 'G'
    load(sprintf('jbe%sExpts.mat',Expt_name));
elseif Expt_name(1) == 'M'
    load(sprintf('lem%sExpts.mat',Expt_name));
end

save_dir = [dir_prefix '/Analysis/bruce/' Expt_name '/sac_mod'];
if ~exist(save_dir,'dir')
    system(['mkdir ' save_dir]);
end

trial_dur = 4;

load([data_dir '/stims/expt_data.mat']); %load in stim-alignment meta-data

%%
include_expts = {'rls.Fa', 'rls.FaXimi','rls.FaXFaXFs'};
for ii = 1:length(Expts)
    if ~isempty(Expts{ii})
        expt_names{ii} = Expts{ii}.Header.expname;
        expt_dds(ii) = Expts{ii}.Stimvals.dd;
        expt_bar_ori(ii) = Expts{ii}.Stimvals.or;
        expt_sac_dir(ii) = mod(Expts{ii}.Stimvals.Fa,180);
        expt_Fr(ii) = Expts{ii}.Stimvals.Fr;
        expt_imback(ii) = isfield(Expts{ii}.Trials,'imi');
        included_type(ii) = any(strcmp(expt_names{ii},include_expts));
    end
end
expt_has_ds(isnan(expt_has_ds)) = 0;
expt_has_ds(expt_has_ds == -1) = 0;
expt_binoc(isnan(expt_binoc)) = 0;
cur_block_set = find(included_type & ~expt_binoc' & expt_Fr == 1);

if strcmp(Expt_name,'M270')
    cur_block_set(cur_block_set == 5) = [];
    cur_block_set(cur_block_set == 19) = []; %this has a different value of pixel size than earlier blocks
end

sim_sac_expts = find(~expt_has_ds(cur_block_set));
imback_gs_expts = find(expt_has_ds(cur_block_set) & expt_imback(cur_block_set)');
grayback_gs_expts = find(expt_has_ds(cur_block_set) & ~expt_imback(cur_block_set)');

%% LOAD REFCLUSTERS
cluster_dir = [dir_prefix '/Analysis/bruce/' Expt_name '/clustering'];
fname = [cluster_dir '/final_cluster.mat'];
if exist(fname,'file')
    load(fname);  
    SU_numbers = unique(SU_ID_mat(~isnan(SU_ID_mat)));
    for ii = 1:length(SU_numbers)
        SU_tot_nblocks(ii) = sum(SU_ID_mat(:) == SU_numbers(ii));
    end
    fprintf('%d SUs Clustered\n',length(SU_numbers));
    
else
    disp('No Cluster data found.');
end
%% COMPUTE TRIAL DATA
cd(data_dir);

fprintf('Computing prep data\n');
trial_cnt = 0;
cur_toffset = 0;

all_stim_times = [];
all_stim_mat = [];
all_t_axis = [];
all_t_bin_edges = [];
all_tsince_start = [];
all_blockvec = [];
all_trialvec = [];
all_trial_Se = [];
all_trial_start_times = [];
all_trial_end_times = [];
all_bin_edge_pts = [];
all_spk_times = cell(n_probes,1);
all_clust_ids = cell(n_probes,1);
trial_toffset = zeros(length(cur_block_set),1);
for ee = 1:length(cur_block_set);
    if ismember(ee,grayback_gs_expts)
        fprintf('Block %d of %d; grayback GS, ori:%d\n',ee,length(cur_block_set),expt_bar_ori(cur_block_set(ee)));
    elseif ismember(ee,imback_gs_expts)
        fprintf('Block %d of %d; imback GS, ori:%d\n',ee,length(cur_block_set),expt_bar_ori(cur_block_set(ee)));
    elseif ismember(ee,sim_sac_expts)
        fprintf('Block %d of %d; SimSac, ori:%d\n',ee,length(cur_block_set),expt_bar_ori(cur_block_set(ee)));
    else
        fprintf('Block %d of %d;  UNMATCHED EXPT TYPE\n',ee,length(cur_block_set));
    end
    cur_block = cur_block_set(ee);
    %     fname = sprintf('Expt%dClusterTimesDetails.mat',cur_block);
    fname = [cluster_dir sprintf('/Block%d_Clusters.mat',cur_block)];
    load(fname,'Clusters');
    for cc = 1:n_probes
        all_spk_times{cc} = cat(1,all_spk_times{cc},Clusters{cc}.times + cur_toffset);
        all_clust_ids{cc} = cat(1,all_clust_ids{cc},Clusters{cc}.spike_clusts);
    end
    
    trial_start_times = [Expts{cur_block}.Trials(:).TrialStart]/1e4;
    trial_end_times = [Expts{cur_block}.Trials(:).TrueEnd]/1e4;
    trial_durs = [Expts{cur_block}.Trials(:).dur]/1e4;
    trial_ids = [Expts{cur_block}.Trials(:).id];
    
    [un_ids,id_inds] = unique(trial_ids);
    rpt_trials = false;
    if length(un_ids) < length(trial_ids)
        rpt_trials = true;
        fprintf('Warning, repeat trial inds detected!\n');
        use_trials = [];
    else
        use_trials = find(trial_durs >= min_trial_dur);
    end    
    
    all_trial_start_times = cat(1,all_trial_start_times,trial_start_times(use_trials)' + cur_toffset);
    all_trial_end_times = cat(1,all_trial_end_times,trial_end_times(use_trials)' + cur_toffset);
    
    trial_Se = [Expts{cur_block}.Trials(:).se];
    trial_Se = trial_Se(id_inds);
    all_trial_Se = cat(1,all_trial_Se,trial_Se(use_trials)');
    
    fname = sprintf('%s/stims/Expt%d_stim',data_dir,cur_block);
    load(fname);
    buffer_pix = floor((expt_npix(cur_block) - use_nPix)/2);
    cur_use_pix = (1:use_nPix) + buffer_pix;
    
    
    n_trials = length(use_trials);
    for tt = 1:n_trials
        cur_stim_times = Expts{cur_block}.Trials(use_trials(tt)).Start'/1e4;
        n_frames = size(left_stim_mats{use_trials(tt)},1);
        if length(cur_stim_times) == 1
            cur_stim_times = (cur_stim_times:dt*Fr:(cur_stim_times + (n_frames-1)*dt*Fr))';
            cur_t_edges = [cur_stim_times; cur_stim_times(end) + dt*Fr];
        end
        %             cur_t_edges = (trial_start_times(use_trials(tt)):dt:trial_end_times(use_trials(tt)))';
        cur_t_axis = 0.5*cur_t_edges(1:end-1) + 0.5*cur_t_edges(2:end);
        
        cur_tsince_start = cur_t_axis - trial_start_times(use_trials(tt));
        
        if ~any(isnan(left_stim_mats{use_trials(tt)}(:))) && n_frames > min_trial_dur/dt
            use_frames = min(length(cur_stim_times),n_frames);
            cur_stim_mat = double(left_stim_mats{use_trials(tt)}(1:use_frames,cur_use_pix));
            
            all_stim_mat = [all_stim_mat; cur_stim_mat];   
            all_stim_times = [all_stim_times; cur_stim_times + cur_toffset];
            all_t_axis = [all_t_axis; cur_t_axis + cur_toffset];
            all_t_bin_edges = [all_t_bin_edges; cur_t_edges + cur_toffset];
            all_tsince_start = [all_tsince_start; cur_tsince_start];
            all_blockvec = [all_blockvec; ones(size(cur_t_axis))*ee];
            all_trialvec = [all_trialvec; ones(size(cur_t_axis))*(tt + trial_cnt)];
            all_bin_edge_pts = [all_bin_edge_pts; length(all_t_bin_edges)];
            
        end
    end
    trial_cnt = trial_cnt + n_trials;
    trial_toffset(ee) = all_t_bin_edges(end);
    cur_toffset = trial_toffset(ee);
end

%%
all_binned_mua = nan(length(all_t_axis),n_probes);
%for only-MU probes
for cc = 1:n_probes
    cur_mua_inds = all_clust_ids{cc} > 0;
    [cur_spkhist,cur_bin_inds] = histc(all_spk_times{cc}(cur_mua_inds),all_t_bin_edges);
    cur_spkhist(all_bin_edge_pts) = [];
    all_binned_mua(:,cc) = cur_spkhist;
end

%for SU probes
fprintf('Using %d SUs\n',length(SU_numbers));
all_binned_sua = nan(length(all_t_axis),length(SU_numbers));
cur_used_blocks = find(ismember(SU_target_blocks,cur_block_set));
SU_ID_mat = SU_ID_mat(cur_used_blocks,:);
[CC,BB] = meshgrid(1:length(SU_clust_data),1:length(cur_used_blocks));
for ss = 1:length(SU_numbers)
   used_clust_set = unique(CC(SU_ID_mat==ss)); %set of clusters used to capture this SU
   for cc = 1:length(used_clust_set)
       cur_clust = used_clust_set(cc);
       cur_probe = SU_clust_data(cur_clust).probe_num;
       cur_clust_label = SU_clust_data(cur_clust).cluster_label;
       cur_block_set = find(SU_ID_mat(:,cur_clust) == ss);
       
       all_su_inds = all_clust_ids{cur_probe} == cur_clust_label;
       all_su_spk_times = all_spk_times{cur_probe}(all_su_inds);
       spk_block_inds = round(interp1(all_t_axis,all_blockvec,all_su_spk_times));
       all_su_spk_times = all_su_spk_times(ismember(spk_block_inds,cur_block_set));
       
       cur_suahist = histc(all_su_spk_times,all_t_bin_edges);
       cur_suahist(all_bin_edge_pts) = [];
       cur_id_set = ismember(all_blockvec,cur_block_set);
       all_binned_sua(cur_id_set,ss) = cur_suahist(cur_id_set);
   end
end

%% DEFINE DATA USED FOR ANALYSIS
used_inds = find(all_tsince_start >= beg_buffer);
all_Xmat = create_time_embedding(all_stim_mat,stim_params);

n_blocks = length(cur_block_set);
Xblock = zeros(length(all_stim_times),n_blocks);
for i = 1:n_blocks
    cur_set = find(all_blockvec==i);
    Xblock(cur_set,i) = 1;
end

%%
init_stim_params = NMMcreate_stim_params([flen use_nPix],dt);
init_stim_params(2) = NMMcreate_stim_params([n_blocks 1],dt);

block_L2 = 1;
null_stim_params = init_stim_params(2:end);
null_reg_params = NMMcreate_reg_params('lambda_L2',[block_L2]);

base_lambda_d2XT = 10;
base_lambda_L1 = 2;

n_squared_filts = 2;
mod_signs = [1 ones(1,n_squared_filts) 1];
NL_types = [{'lin'} repmat({'quad'},1,n_squared_filts) {'lin'}];
init_d2XT = [ones(n_squared_filts+1,1); 0;];
init_L2 = [zeros(n_squared_filts+1,1); block_L2];
init_reg_params = NMMcreate_reg_params('lambda_d2XT',init_d2XT,'lambda_L2',init_L2);
init_Xtargs = [ones(n_squared_filts+1,1); 2];
init_optim_p.optTol = 1e-5; init_optim_p.progTol = 1e-8;
silent = 0;

%% FOR SUA
for cc = 1:length(SU_numbers)
    
    fprintf('Computing trig avgs for SUA %d of %d\n',cc,length(SU_numbers));
    cur_used_inds = used_inds(~isnan(all_binned_sua(used_inds,cc)));
    
    if ~isempty(cur_used_inds)
        
        Robs = all_binned_sua(cur_used_inds,cc);
        cur_X{1} = all_Xmat(cur_used_inds,:);
        cur_X{2} = Xblock(cur_used_inds,:);
        
        gqm1 = NMMinitialize_model(init_stim_params,mod_signs,NL_types,init_reg_params,init_Xtargs);
        gqm1 = NMMfit_filters(gqm1,Robs,cur_X,[],[],silent,init_optim_p);
        [LL, penLL, pred_rate, G, gint] = NMMmodel_eval(gqm1,Robs,cur_X);
        gqm1 = NMMadjust_regularization(gqm1,find(init_Xtargs==1),'lambda_d2XT',base_lambda_d2XT./var(gint)');
        gqm1 = NMMadjust_regularization(gqm1,find(init_Xtargs==1),'lambda_L1',base_lambda_L1./std(gint)');
        gqm1 = NMMfit_filters(gqm1,Robs,cur_X,[],[],silent);
        
        null_mod = NMMinitialize_model(null_stim_params,[1],{'lin'},null_reg_params,[1]);
        null_mod = NMMfit_filters(null_mod,Robs,cur_X(2:end));
        
        su_qmods(cc) = gqm1;
        su_qmod_LLimp(cc) = gqm1.LL_seq(end) - null_mod.LL_seq(end);
    end
end

%% FOR MUA
for cc = 1:24
    
    fprintf('Computing trig avgs for MUA %d of %d\n',cc,24);
    cur_used_inds = used_inds(~isnan(all_binned_mua(used_inds,cc)));
    
    if ~isempty(cur_used_inds)
        
        Robs = all_binned_mua(cur_used_inds,cc);
        cur_X{1} = all_Xmat(cur_used_inds,:);
        cur_X{2} = Xblock(cur_used_inds,:);
        
        gqm1 = NMMinitialize_model(init_stim_params,mod_signs,NL_types,init_reg_params,init_Xtargs);
        gqm1 = NMMfit_filters(gqm1,Robs,cur_X,[],[],silent,init_optim_p);
        [LL, penLL, pred_rate, G, gint] = NMMmodel_eval(gqm1,Robs,cur_X);
        gqm1 = NMMadjust_regularization(gqm1,find(init_Xtargs==1),'lambda_d2XT',base_lambda_d2XT./var(gint)');
        gqm1 = NMMadjust_regularization(gqm1,find(init_Xtargs==1),'lambda_L1',base_lambda_L1./std(gint)');
        gqm1 = NMMfit_filters(gqm1,Robs,cur_X,[],[],silent);
        
        null_mod = NMMinitialize_model(null_stim_params,[1],{'lin'},null_reg_params,[1]);
        null_mod = NMMfit_filters(null_mod,Robs,cur_X(2:end));
        
        mu_qmods(cc) = gqm1;
        mu_qmod_LLimp(cc) = gqm1.LL_seq(end) - null_mod.LL_seq(end);
    end
end
